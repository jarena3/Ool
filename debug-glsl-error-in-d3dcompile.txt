#line 63 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#line 12

// Upgrade NOTE: excluded shader from DX11 and Xbox360; has structs without semantics (struct v2f members vpos)
// #pragma exclude_renderers d3d11 xbox360
// Upgrade NOTE: excluded shader from Xbox360; has structs without semantics (struct v2f members vpos)
// #pragma exclude_renderers xbox360
#include "UnityCG.cginc"
 
struct appdata {
float4 vertex : POSITION;
float3 normal : NORMAL;
};
 
struct v2f {
float4 pos : POSITION;
float3 vpos;
float4 color : COLOR;
};
 
uniform float _Outline;
uniform float4 _OutlineColor;
 
v2f vert(appdata v) {
v2f o;
o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
 
float3 norm   = mul ((float3x3)UNITY_MATRIX_IT_MV, v.normal);
float2 offset = TransformViewToProjection(norm.xy);
 
o.pos.xy += offset * o.pos.z * _Outline;
//        o.pos.xyz += v.normal*_Outline;
o.vpos = v.vertex.xyz;
o.color = _OutlineColor;
return o;
}
#line 63 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

// #pragma vertex vert
// #pragma fragment frag
 
half4 frag(v2f i) :COLOR
{
float3 gradientCenter = float3(0,0,0);
float3 pos = normalize(i.vpos.xyz-gradientCenter.xyz);
float4 c =  float4(i.color.rgb,pos.z*i.color.a);
return c;
 
 
}
